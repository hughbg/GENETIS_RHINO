var NPOP = 5;
var indiv = 1;
var gen = 2;
var workingdir = "/fs/ess/PAS1960/HornEvoDev/GENETIS_PUEO";
var RunName = "realtest1";
var freq_start = 200.00;
var freq_step = 10.0;
var freqCoefficients = 131;
var sym_count = 0;
//Factor of 1.0 frequency
/**************************************** Set Global Variables **************************************************/
var units = " cm";
var num_ridges = 4; // either 2 or 4
var path = workingdir + "/Run_Outputs/" + RunName + "/Generation_Data/" + gen + "_generationDNA.csv"


// Order of genes:
// S, H, x0, y0, xf, yf, zf, beta
var Tau=0.26; // Normalized parametric time--no good reason to be 0.26, but it's fine

var height1=0.01; // Where we place the second power source; needs to not intersect the first one!
var height2=0.06; // Where we place the second power source; needs to not intersect the first one!

// create the frequency array
var freq = [];
for (var i = 0; i < freqCoefficients; i++) {
    freq.push(freq_start + i * freq_step);
}

/******************************************** Read in Data *****************************************************/
var headerLines = 7 // This is how many lines come before the frequency data in the file
var antennaLines = 9 // This is how many lines come before the antenna data
var file = new File(path);
file.open(1);
var generationDNA = file.readAll();
/********************************************* Function Calls **************************************************/


var file = new File(path);
file.open(1);
var generationDNA = file.readAll();

// Lists to hold the genes
var S=[];	// Side length of bottom of antenna
//var m=[];
var H=[];	// Height of antenna
var X0=[];	// distance from center of ridges at bottom // previously 0.04
var Y0=[];	// (half) width of ridges at bottom // previously 0.04
var Z0=[];	// initial height of ridges (0 always for now)
var Xf=[];	// final distance from center of curve of ridges at max height
var Yf=[];	// final width of ridges at max height
var Zf=[];	// max height of ridges
var Beta=[];	// curvature of ridges
var L=[];	// (half) width of minor length of trapezoid extrude
var h=[];	// "height" of trapezoid extrude (in x-y plane; must be < x0)


var lines = generationDNA.split('\n');


//for(var counter = indiv;counter<=NPOP;counter++)
//{
	
//	j = 1;
//	Output.println(counter);

	
	// Loop over reading in the gene values
	for(var i = 0;i < lines.length - 1;i++)
	{
		//Output.println(i);
		if(i==headerLines)
		{
			var frequencies = lines[i].split(",");
		}
    	if(i>=antennaLines)
      {
      var params = lines[i].split(",");
			Output.println("Individual "+ i - headerLines);
			Output.println("Side length 1: "+params[0]);
			Output.println("Height 1: "+params[1]);
			Output.println("x0 1: "+params[2]);
			Output.println("y0 1: "+params[3]);
			Output.println("yf 1: "+params[4]);
			Output.println("zf 1: "+params[5]);
			Output.println("Beta 1: "+params[6]);
			Output.println("Trapezoid height 1: "+params[7]/100);
			Output.println("Trapezoid length 1: "+params[8]/100+"\n");

			S[i-antennaLines]=params[0]/100;
			H[i-antennaLines]=params[1]/100;
			//m[i-antennaLines]=params[0];
			X0[i-antennaLines]=params[2]/100; // previously 0.04
			Y0[i-antennaLines]=params[3]/100; // previously 0.04
			Z0[i-antennaLines]=0;
			//xf[i-antennaLines]=params[0];
			Yf[i-antennaLines]=params[4]/100; // Preferably swap this order in the GA!!
			Zf[i-antennaLines]=params[5]/100;
			Beta[i-antennaLines]=params[6];
			h[i-antennaLines]=params[7]/100;
			L[i-antennaLines]=params[8]/100;
/*
			Output.println("Side length: ", S[i-antennaLines]);
			Output.println("Height: ", H[i-antennaLines]);
			Output.println("x0: ", X0[i-antennaLines]);
			Output.println("y0: ", Y0[i-antennaLines]);
			Output.println("yf: ", Yf[i-antennaLines]);
			Output.println("zf: ", Zf[i-antennaLines]);
			Output.println("beta: ", Beta[i-antennaLines]);
			Output.println("Trapezoid length: ", L[i-antennaLines]);
			Output.println("Trapezoid height: ", h[i-antennaLines]);
*/
		}
	}
//}

for(var i = indiv - 1; i < NPOP; i++)
{
	
		var s = S[i];
		var ah = H[i];
		var x0 = X0[i];
		var y0 = Y0[i];
		var z0 = 0;
		var xf = s; // By constraint
		var yf = Yf[i];
		var zf = Zf[i];
		var beta = Beta[i];
		var l = L[i];
		var th = h[i];
		var m = 1;
		var d = 0.03;


		//T = Tau/(Math.exp(zf/beta)-1)*(Math.exp(height/beta)-1);
		//X = 1*x0 + (zf-x0)/Tau * T; // Multiply x0 by 1 because otherwise it doesn't know it's a number lol
		//Output.println(T);
		//Output.println(X);

		Output.println("x0: "+ x0);
		Output.println("y0: "+ y0);
		Output.println("z0: "+ z0);
		Output.println("xf: "+ xf);
		Output.println("yf: "+ yf);
		Output.println("zf: "+ zf);
		Output.println("beta: "+ beta);
		Output.println("Side length: "+ s);
		Output.println("Height: "+ ah);
		Output.println("Trapezoid height: "+ th);
		Output.println("Trapezoid length: "+ l);

		// Function calls
		// We do it twice, first for horizontal source then for vertical
		for(var k = 0; k <= sym_count; k++)
		{

			if(k == 0)
			{
				height = -height1;
			}
			else
			{
				height = -height2;
			}
			T = Tau/(Math.exp(zf/beta)-1)*(Math.exp(height/beta)-1);
			X = 1*x0 + (zf-x0)/Tau * T; // Multiply x0 by 1 because otherwise it doesn't know it's a number lol

			//l = (x0-y0)/4; //arbitrary
			//Output.println(l);
			//Output.println(x0);
			//Output.println(y0);
			App.getActiveProject().getGeometryAssembly().clear();
			CreatePEC();
			build_waveguide(1*s, 1*x0,1*y0,-1*d);
			//extend_ridges(1*s, 1*x0,1*y0,-1*d);
			extend_ridges_trapezoid(1*s, 1*x0,1*y0,-1*d, 1*l, 1*th);
			build_walls(s,m,ah);
			//build_walls(s,-m,-ah);
			build_ridges(1*x0, 1*y0, 1*z0, 1*xf, 1*yf, 1*zf, 1*Tau, beta, 1*s/100, 1*m); 
			//build_ridges(1*x0, 1*y0, 1*z0, 1*xf, 1*yf, -1*zf, 1*Tau, -beta, 1*s/100, 1*m); // trying to make a second one pointing at the first
			CreateAntennaSource(k, 1*x0, 1*y0, height, 1*l); 
			CreateGrid(1*x0, 1*y0, 1*d);
			CreateSensors();
			CreateAntennaSimulationData();
			QueueSimulation();
			Output.println(ResultQuery().simulationId);
			MakeImage(i);
		}
	
}

file.close();
App.quit();
// Makes the outer walls of the horn antenna
// S is the side length of the bottom of the wall
// m is the coefficient for the linear function the walls extrude according to (currently set to 1)
// H is the final height of the walls
function build_walls(S,m,H) 
{
	// Make the edges to define the square
	var edge1 = Line( new Cartesian3D(-S,-S, 0), new Cartesian3D(-S, S, 0));
	var edge2 = Line( new Cartesian3D(-S, S, 0), new Cartesian3D(S, S, 0));
	var edge3 = Line( new Cartesian3D(S,S, 0), new Cartesian3D(S, -S, 0));
	var edge4 = Line( new Cartesian3D(S,-S, 0), new Cartesian3D(-S, -S, 0));

//	var edge1 = Line( new Cartesian3D(-S,-S, 0), new Cartesian3D(-S, S, 0));
//	var edge2 = Line( new Cartesian3D(-S, S, 0), new Cartesian3D(S/2, S, 0));
//	var diag1 = Line( new Cartesian3D(S/2, S, 0), new Cartesian3D(S, S/2, 0));	
//	var edge3 = Line( new Cartesian3D(S,S/2, 0), new Cartesian3D(S, -S/2, 0));
//	var diag2 = Line( new Cartesian3D(S, -S/2, 0), new Cartesian3D(S/2, -S, 0));	
//	var edge4 = Line( new Cartesian3D(S,-S, 0), new Cartesian3D(-S, -S, 0));
	
	// Declare sketches to be made from the edges
	var wallSegment = new Sketch();
	var bottomSegment = new Sketch();
	wallSegment.addEdge(edge1);
	wallSegment.addEdge(edge2);
	wallSegment.addEdge(edge3);
	wallSegment.addEdge(edge4);
//	wallSegment.addEdge(diag1);
//	wallSegment.addEdge(diag2);

	bottomSegment.addEdge(edge1);
	bottomSegment.addEdge(edge2);
	bottomSegment.addEdge(edge3);
	bottomSegment.addEdge(edge4);
//	bottomSegment.addEdge(diag1);
//	bottomSegment.addEdge(diag2);

	// Let's start by making the bottom
	var bottomCover = new Cover(bottomSegment);
	var bottomRecipe = new Recipe();
	bottomRecipe.append( bottomCover );
	var bottomModel = new Model();
	bottomModel.setRecipe( bottomRecipe );
	// Add the surface
	//var bottom = App.getActiveProject().getGeometryAssembly().append(bottomModel);
	//bottom.name = "Bottom square";

	// Now we need to extrude the edges to get height
	var walls = new Extrude( wallSegment, H);				// Makes an Extrude
	var wallOptions = walls.getOptions();						// Gives the possible options for 
	// We will use the draft law option to extrude linearly
	wallOptions.draftOption = SweepOptions.DraftLaw;			// allows for draftlaw
	wallOptions.draftLaw = "("+m+"*x)";							// Set the expression for the extrude
	wallOptions.draftOption = 4;								// 4 indicates we use draftlaw
    //Walter - Change the gap type to Extended to get the desired shape
	wallOptions.gapType = SweepOptions.Extended; 				// I actually don't like this when we have x^2, but it doesn't do much for just x
    //Walter - Create a shell instead of a solid part
	wallOptions.createSolid = false;							// This way the shape isn't filled in
	walls.setOptions ( wallOptions );							// Sets the settings we assigned above

	// Make a recipe for a model
	var wallRecipe = new Recipe();
	wallRecipe.append(walls);
	var wallModel = new Model();
	wallModel.setRecipe(wallRecipe);
	wallModel.name = "Outer Walls";
	wallModel.getCoordinateSystem().translate(new Cartesian3D(0,0,0));	// Makes the model start at the origin

	// Set the material for these parts
	var wallProject = App.getActiveProject().getGeometryAssembly().append(wallModel);	// Adds the model to the project
	var pecMaterial = App.getActiveProject().getMaterialList().getMaterial( "PEC" );	// Makes the material available
	App.getActiveProject().setMaterial( wallProject, pecMaterial );						// Sets the material
	//App.getActiveProject().setMaterial( bottom, pecMaterial );						// Sets the material

}

// Builds the ridges
// Here are the arguments, which are primarily used when making the LawEdges
// Bottom x: distance from center
// Bottom y: distance from center
// Bottom z: distance from center (keep to 0)
// Top x: distance from center
// Top y: distance from center
// Top z: distance from center
// tau: Arbitrary time limit used for the parametric curves (the ridge shapes)
// beta: determines the curvature of the ridges
// S: Side length of bottom of walls 
// m: Slope of walls (currently set to 1)
function build_ridges(x_0, y_0, z_0, x_f, y_f, z_f, tau, beta, S, m)
{

	// Curves (Z is logarithmic in t)
	var Log1 = new LawEdge( ""+x_0+" + ("+z_f+"-"+x_0+")/"+tau+"*u", ""+y_0+" + ("+y_f+"-"+y_0+")/"+tau+"*u", ""+beta+"*ln((exp("+z_f+"/"+beta+")-1.0)/"+tau+"*u+1.0)", 0, tau); 
	var Log2 = new LawEdge( ""+x_0+" + ("+z_f+"-"+x_0+")/"+tau+"*u", "-"+y_0+" - ("+y_f+"-"+y_0+")/"+tau+"*u", ""+beta+"*ln((exp("+z_f+"/"+beta+")-1.0)/"+tau+"*u+1.0)", 0, tau);

	// Inner straight slopes 
	var IS1 = new LawEdge( ""+x_0+" + ("+z_f+"-"+x_0+")/"+tau+"*u", ""+y_0+" + ("+y_f+"-"+y_0+")/"+tau+"*u", "("+z_f+"-"+z_0+")/"+tau+"*u", 0, tau); 
	var IS2 = new LawEdge( ""+x_0+" + ("+z_f+"-"+x_0+")/"+tau+"*u", "-"+y_0+" - ("+y_f+"-"+y_0+")/"+tau+"*u", "("+z_f+"-"+z_0+")/"+tau+"*u", 0, tau);

	// Bottom line
	var BL1 = new LawEdge(""+x_0+" + ("+x_f+"-"+x_0+")/"+tau+"*u", ""+y_0+"", ""+z_0+"", 0, tau);
	var BL2 = new LawEdge(""+x_0+" + ("+x_f+"-"+x_0+")/"+tau+"*u", "-"+y_0+"", ""+z_0+"", 0, tau);

	// Top line
	var TL1 = new LawEdge(""+z_f+" + "+x_f+"/"+tau+"*u", ""+y_f+"", ""+z_f+"", 0, tau);
	var TL2 = new LawEdge(""+z_f+" + "+x_f+"/"+tau+"*u", "-"+y_f+"", ""+z_f+"", 0, tau);

	// Outer Straight slopes
	var OS1 = new LawEdge( ""+x_f+" + "+z_f+"/"+tau+"*u", ""+y_0+" + ("+y_f+" - "+y_0+")/"+tau+"*u", ""+z_f+"/"+tau+"*u", 0, tau);
	var OS2 = new LawEdge( ""+x_f+" + "+z_f+"/"+tau+"*u", "-"+y_0+" - ("+y_f+" - "+y_0+")/"+tau+"*u", ""+z_f+"/"+tau+"*u", 0, tau);

	// Inner top line
	var ITL = new LawEdge( ""+z_f+"", "-"+y_f+" + 2*"+y_f+"/"+tau+"*u", ""+z_f+"", 0, tau);

	// Outer top line
	var OTL = new LawEdge( ""+x_f+" + "+z_f+"", "-"+y_f+" + 2*"+y_f+"/"+tau+"*u", ""+z_f+"", 0, tau);

	// Inner bottom line
	var IBL = new LawEdge( ""+x_0+"", "-"+y_0+" + 2*"+y_0+"/"+tau+"*u", ""+z_0+"", 0, tau);

	// Outer bottom line
	var OBL = new LawEdge( ""+x_f+"", "-"+y_0+" + 2*"+y_0+"/"+tau+"*u", ""+z_0+"", 0, tau);

	// Make the sketches
	var straightEdge1 = new Sketch(); 	// All straight edges (IS1, BL1, TL1, OS1)
	var straightEdge2 = new Sketch(); 	// All straight edges (IS2, BL2, TL2, OS2)	
	var curvedLog1 = new Sketch(); 		// Logarithmic edge (IS1 and Log1)
	var curvedLog2 = new Sketch(); 		// Logarithmic edge (IS2 and Log2)
	var topRectangle = new Sketch(); 	// Top rectangle
	var bottomRectangle = new Sketch(); // Bottom rectangle

	// Add the edges to the sketches
	straightEdge1.addEdges( [IS1, BL1, TL1, OS1] );	// Inner straight slope
	curvedLog1.addEdges( [IS1, Log1] );				// Right logarithm part
	straightEdge2.addEdges( [IS2, BL2, TL2, OS2] ); 	// Inner straight slope
	curvedLog2.addEdges( [IS2, Log2] );			 	// Left logarithm part
	topRectangle.addEdges( [ITL, OTL, TL1, TL2] );		// Top rectangle
	bottomRectangle.addEdges( [IBL, OBL, BL1, BL2] );	// Bottom Rectangle

	//WALTER - The Elliptical pattern is added as a recipe to the parts
	//In this case the location of the center and direction of the normal are simple, but for more complex scenarios, may need to use more functionality to find them.
	var ePattern = new EllipticalPattern();
	ePattern.setCenter(new CoordinateSystemPosition(0,0,0));
	ePattern.setNormal(new CoordinateSystemDirection(0,0,1));
	ePattern.setInstances(num_ridges);
	ePattern.setRotated(true);

	// Create an array of covers (used for making the ridges solid/closed)
	var cov = new Array();
	cov.push(new Cover(straightEdge1));
	cov.push(new Cover(straightEdge2));
	cov.push(new Cover(curvedLog1));
	cov.push(new Cover(curvedLog2));
	cov.push(new Cover(topRectangle));
	cov.push(new Cover(bottomRectangle));

	var pecMaterial = App.getActiveProject().getMaterialList().getMaterial( "PEC" );

	//WALTER - We can loop over all our parts and add them to the project as follows.  You can use similar concepts above.
	models = new Assembly();
	for(var w = 0; w < cov.length; w++)
	{
		var r = new Recipe();
		r.append(cov[w]);
		r.append(ePattern);
		var m = new Model();
		m.setRecipe(r);
		m.name = "Test Surface " + (w+1);
		//WALTER - Seperate array for the models, though we could just get them from the GemoetryAssembly again
		models.append(m);
		App.getActiveProject().setMaterial( m, pecMaterial );

	}

	// Work on the loft
	var vertex_position1 = curvedLog1.getPosition(curvedLog1.getVertexIds()[0]);	
	var vertex_position2 = curvedLog2.getPosition(curvedLog2.getVertexIds()[0]);

	var loft = new Loft(models.at(2).pickFace(new Cartesian3D (0, 0, 0), vertex_position1, 0.5), "0.0", models.at(3).pickFace(new Cartesian3D(0,0,0), vertex_position2, 0.5), "0.0");
	loft.setPart1(models.at(2));
	loft.setPart2(models.at(3));
		
	var r12 = new Recipe();
	r12.append( loft );
	r12.append(ePattern);
	var m12 = new Model();
	m12.setRecipe( r12 );
	m12.name = "Loft 1";
	models.append(m12);

	//WALTER - append the assembly to the project, then loop over it to assign the material
	var assembly = App.getActiveProject().getGeometryAssembly().append(models);
	for(x = 0; x < assembly.size(); x++)
	{
		Output.println(assembly.at(x));
		App.getActiveProject().setMaterial( assembly.at(x), pecMaterial );
	}

}
// Make a waveguide
function build_waveguide(S,x_0,y_0,D) // D for "depdth"
{

	// Make the edges to define the square
	var edge1 = Line( new Cartesian3D(-S,-S, 0), new Cartesian3D(-S, S, 0));
	var edge2 = Line( new Cartesian3D(-S, S, 0), new Cartesian3D(S, S, 0));
	var edge3 = Line( new Cartesian3D(S,S, 0), new Cartesian3D(S, -S, 0));
	var edge4 = Line( new Cartesian3D(S,-S, 0), new Cartesian3D(-S, -S, 0));
	
	// Declare sketches to be made from the edges
	var wallSegment = new Sketch();
	var bottomSegment = new Sketch();
	wallSegment.addEdge(edge1);
	wallSegment.addEdge(edge2);
	wallSegment.addEdge(edge3);
	wallSegment.addEdge(edge4);
	bottomSegment.addEdge(edge1);
	bottomSegment.addEdge(edge2);
	bottomSegment.addEdge(edge3);
	bottomSegment.addEdge(edge4);

	// Let's start by making the bottom
	var bottomCover = new Cover(bottomSegment);
	var bottomRecipe = new Recipe();
	bottomRecipe.append( bottomCover );
	var bottomModel = new Model();
	bottomModel.setRecipe( bottomRecipe );
	// Add the surface
	//var bottom = App.getActiveProject().getGeometryAssembly().append(bottomModel);
	//bottom.name = "Bottom square";

	// Now we need to extrude the edges to get height
	var walls = new Extrude( wallSegment, D);				// Makes an Extrude
	var wallOptions = walls.getOptions();						// Gives the possible options for 
	// We will use the draft law option to extrude linearly
	wallOptions.draftOption = SweepOptions.DraftLaw;			// allows for draftlaw
	wallOptions.draftLaw = "(-1)";							// Set the expression for the extrude
	wallOptions.draftOption = 4;								// 4 indicates we use draftlaw
    //Walter - Change the gap type to Extended to get the desired shape
	wallOptions.gapType = SweepOptions.Extended; 				// I actually don't like this when we have x^2, but it doesn't do much for just x
    //Walter - Create a shell instead of a solid part
	wallOptions.createSolid = false;							// This way the shape isn't filled in
	walls.setOptions ( wallOptions );							// Sets the settings we assigned above

	// Make a recipe for a model
	var wallRecipe = new Recipe();
	wallRecipe.append(walls);
	var wallModel = new Model();
	wallModel.setRecipe(wallRecipe);
	wallModel.name = "Outer Walls";
	wallModel.getCoordinateSystem().translate(new Cartesian3D(0,0,0));	// Makes the model start at the origin

	// Set the material for these parts
	var wallProject = App.getActiveProject().getGeometryAssembly().append(wallModel);	// Adds the model to the project
	var pecMaterial = App.getActiveProject().getMaterialList().getMaterial( "PEC" );	// Makes the material available
	App.getActiveProject().setMaterial( wallProject, pecMaterial );						// Sets the material
	//App.getActiveProject().setMaterial( bottom, pecMaterial );						// Sets the material

}
// New extensions but with trapezoid shapes
// We define L as the half length of the minor side of the trapezoid
// We want the trapezoid to be at 45 degrees from the major base, so we 
//	say the height is y0 - L
function extend_ridges_trapezoid(S, x_0, y_0, D, L, th) // D for "depdth", L for "Length"
{


	// Below works for example antenna at l = (x0-y0)/4
	// Make the edges to define the square
	var edge1 = Line( new Cartesian3D(-S  , y_0, 0), new Cartesian3D(-x_0, y_0, 0)); // good
	var diag1 = Line( new Cartesian3D(-x_0, y_0, 0), new Cartesian3D(-x_0 + th, L, 0)); // good
	var edge5 = Line( new Cartesian3D(-x_0 + th, L, 0), new Cartesian3D(-x_0 + th, -L, 0));	// good
	var diag2 = Line( new Cartesian3D(-x_0 + th, -L, 0), new Cartesian3D(-x_0, -y_0, 0)); // good
	var edge3 = Line( new Cartesian3D(-x_0,-y_0, 0), new Cartesian3D(-S, -y_0, 0)); // good
	var edge4 = Line( new Cartesian3D(-S  ,-y_0, 0), new Cartesian3D(-S, y_0, 0)); // good


// For original (45 degree opening) trapezoid\
/*
	// Below works for example antenna at l = (x0-y0)/4
	// Make the edges to define the square
	var edge1 = Line( new Cartesian3D(-S  , y_0, 0), new Cartesian3D(-x_0, y_0, 0)); // good
	var diag1 = Line( new Cartesian3D(-x_0, y_0, 0), new Cartesian3D(-x_0 - L + y_0, L, 0)); // good
	var edge5 = Line( new Cartesian3D(-x_0 - L + y_0, L, 0), new Cartesian3D(-x_0 - L + y_0, -L, 0));	// good
	var diag2 = Line( new Cartesian3D(-x_0 - L + y_0, -L, 0), new Cartesian3D(-x_0, -y_0, 0)); // good
	var edge3 = Line( new Cartesian3D(-x_0,-y_0, 0), new Cartesian3D(-S, -y_0, 0)); // good
	var edge4 = Line( new Cartesian3D(-S  ,-y_0, 0), new Cartesian3D(-S, y_0, 0)); // good
*/
	// NOT S COME ONNNNNNNNNNNNNNNN
/*	var edge1 = Line( new Cartesian3D(-S,-S, 0), new Cartesian3D(-S, S, 0));
	var edge2 = Line( new Cartesian3D(-S, S, 0), new Cartesian3D(S/2, S, 0));
	var diag1 = Line( new Cartesian3D(S/2, S, 0), new Cartesian3D(S, S/2, 0));	
	var edge3 = Line( new Cartesian3D(S,S/2, 0), new Cartesian3D(S, -S/2, 0));
	var diag2 = Line( new Cartesian3D(S, -S/2, 0), new Cartesian3D(S/2, -S, 0));	
	var edge4 = Line( new Cartesian3D(S/2,-S, 0), new Cartesian3D(-S, -S, 0));
*/
/*
	// NOT S COME ONNNNNNNNNNNNNNNN
	var edge1 = Line( new Cartesian3D(-S, y_0, 0), new Cartesian3D(-S+9*S/10, y_0, 0));
	var diag1 = Line( new Cartesian3D(-S+9*S/10, y_0, 0), new Cartesian3D(-x_0, y_0/2, 0));
	var edge2 = Line( new Cartesian3D(-x_0, y_0/2, 0), new Cartesian3D(-x_0, -y_0/2, 0));	
	var diag2 = Line( new Cartesian3D(-x_0,-y_0/2, 0), new Cartesian3D(-S+9*S/10, -y_0, 0));
	var edge3 = Line( new Cartesian3D(-S+9*S/10, -y_0, 0), new Cartesian3D(-S, -y_0, 0));	
	var edge4 = Line( new Cartesian3D(-S,-y_0, 0), new Cartesian3D(-S, y_0, 0));
*/

/*
	// NOT S COME ONNNNNNNNNNNNNNNN
	var edge1 = Line( new Cartesian3D(-S, y_0, 0), new Cartesian3D(-x_0-y_0/2, y_0, 0));
	var diag1 = Line( new Cartesian3D(-x_0-y_0/2, y_0, 0), new Cartesian3D(-x_0, y_0/2, 0));
	var edge2 = Line( new Cartesian3D(-x_0, y_0/2, 0), new Cartesian3D(-x_0, -y_0/2, 0));	
	var diag2 = Line( new Cartesian3D(-x_0,-y_0/2, 0), new Cartesian3D(-x_0-y_0/2, -y_0, 0));
	var edge3 = Line( new Cartesian3D(-x_0-y_0/2, -y_0, 0), new Cartesian3D(-S, -y_0, 0));	
	var edge4 = Line( new Cartesian3D(-S,-y_0, 0), new Cartesian3D(-S, y_0, 0));
*/


	// Declare sketches to be made from the edges
	var wallSegment = new Sketch();
	var bottomSegment = new Sketch();
	wallSegment.addEdge(edge1);
//	wallSegment.addEdge(edge2);
	wallSegment.addEdge(edge3);
	wallSegment.addEdge(edge4);
	wallSegment.addEdge(diag1);
	wallSegment.addEdge(diag2);
	wallSegment.addEdge(edge5);


	bottomSegment.addEdge(edge1);
//	bottomSegment.addEdge(edge2);
	bottomSegment.addEdge(edge3);
	bottomSegment.addEdge(edge4);
	bottomSegment.addEdge(diag1);
	bottomSegment.addEdge(diag2);
	bottomSegment.addEdge(edge5);

	// Let's start by making the bottom
	var bottomCover = new Cover(bottomSegment);
	var bottomRecipe = new Recipe();
	bottomRecipe.append( bottomCover );
	var bottomModel = new Model();
	bottomModel.setRecipe( bottomRecipe );
	// Add the surface
	//var bottom = App.getActiveProject().getGeometryAssembly().append(bottomModel);
	//bottom.name = "Bottom square";

	// Now we need to extrude the edges to get height
	var walls = new Extrude( wallSegment, D);				// Makes an Extrude
	var wallOptions = walls.getOptions();						// Gives the possible options for 
	// We will use the draft law option to extrude linearly
	wallOptions.draftOption = SweepOptions.DraftLaw;			// allows for draftlaw
	wallOptions.draftLaw = "(-1)";							// Set the expression for the extrude
	wallOptions.draftOption = 4;								// 4 indicates we use draftlaw
    //Walter - Change the gap type to Extended to get the desired shape
	wallOptions.gapType = SweepOptions.Extended; 				// I actually don't like this when we have x^2, but it doesn't do much for just x
    //Walter - Create a shell instead of a solid part
	wallOptions.createSolid = true;							// This way the shape isn't filled in
	walls.setOptions ( wallOptions );							// Sets the settings we assigned above

	// Make elliptical pattern for extensions
	var ePattern = new EllipticalPattern();
	ePattern.setCenter(new CoordinateSystemPosition(0,0,0));
	ePattern.setNormal(new CoordinateSystemDirection(0,0,1));
	ePattern.setInstances(num_ridges);
	ePattern.setRotated(true);

	// Make a recipe for a model
	var wallRecipe = new Recipe();
	wallRecipe.append(walls);
	wallRecipe.append(ePattern);
	var wallModel = new Model();
	wallModel.setRecipe(wallRecipe);
	wallModel.name = "Outer Walls";
	wallModel.getCoordinateSystem().translate(new Cartesian3D(0,0,0));	// Makes the model start at the origin

	// Set the material for these parts
	var wallProject = App.getActiveProject().getGeometryAssembly().append(wallModel);	// Adds the model to the project
	var pecMaterial = App.getActiveProject().getMaterialList().getMaterial( "PEC" );	// Makes the material available
	App.getActiveProject().setMaterial( wallProject, pecMaterial );						// Sets the material
	//App.getActiveProject().setMaterial( bottom, pecMaterial );						// Sets the material

}


// CreatPEC Function
// This makes the "perfect electrical conductor" material
function CreatePEC() //borrowed from XF demo
{
    //Make the material.  We will use PEC, or Perfect Electrical Conductor:
    var pec = new Material();
    pec.name = "PEC";
    var pecProperties = new PEC();      // This is the electric properties that defines PEC
    var pecMagneticFreespace = new MagneticFreespace();     // We could make a material that acts as PEC and PMC, but in this case we just care about electrical components.
    var pecPhysicalMaterial = new PhysicalMaterial();
    pecPhysicalMaterial.setElectricProperties( pecProperties );
    pecPhysicalMaterial.setMagneticProperties( pecMagneticFreespace );
    pec.setDetails( pecPhysicalMaterial );
    // PEC is historically a "white" material, so we can easily change its appearance:
    var pecBodyAppearance = pec.getAppearance();
    var pecFaceAppearance = pecBodyAppearance.getFaceAppearance();  // The "face" appearance is the color/style associated with the surface of geometry objects
        pecFaceAppearance.setColor( new Color( 255, 255, 255, 255 ) );  // Set the surface color to white. (255 is the maximum intensity, these are in order R,G,B,A).
    // Check for an existing material
    if( null != App.getActiveProject().getMaterialList().getMaterial( pec.name ) )
    {
            App.getActiveProject().getMaterialList().removeMaterial( pec.name );
    }
	    App.getActiveProject().getMaterialList().addMaterial( pec );
}

function CreateAntennaSource(h_or_v, x, y, Height, L)
{
    // Here we will create our waveform, create our circuit component definition for the feed, and create
    // a CircuitComponent that will attach those to our current geometry.
    var waveformList = App.getActiveProject().getWaveformList();
        // clear the waveform list
	    waveformList.clear();

    // Create a gaussian derivative input wave
    var waveform = new Waveform();
    var GDer = new GaussianDerivativeWaveformShape ();
    GDer.pulseWidth = 2e-9;
    waveform.setWaveformShape( GDer );
    waveform.name ="Gaussian Derivative";
    var waveformInList = waveformList.addWaveform( waveform );

    // Now to create the circuit component definition:
    var componentDefinitionList = App.getActiveProject().getCircuitComponentDefinitionList();
    // clear the list
    componentDefinitionList.clear();

    // Create our Feed
    var feed1 = new Feed();
    var feed2 = new Feed();

    feed1.feedType = Feed.Voltage; // Set its type enumeration to be Voltage.
    //feed2.feedType = Feed.Voltage; // Set its type enumeration to be Voltage.

    // Define a 50-ohm resistance for this feed
    var rlc = new RLCSpecification();
    rlc.setResistance( "50 ohm" );
    rlc.setCapacitance( "0" );
    rlc.setInductance( "0" );
    feed1.setImpedanceSpecification( rlc );
    feed1.setWaveform( waveformInList );  // Make sure to use the reference that was returned by the list, or query the list directly
    feed1.name = "50-Ohm Voltage Source";
    var feedInList = componentDefinitionList.addCircuitComponentDefinition( feed1 );


	feed2.setImpedanceSpecification( rlc );
    feed2.setWaveform( waveformInList );  // Make sure to use the reference that was returned by the list, or query the list directly
    feed2.name = "50-Ohm Voltage Source 2";
    var feedInList = componentDefinitionList.addCircuitComponentDefinition( feed2 );

    // Now create a circuit component that will be the feed point for our simulation
    var componentList = App.getActiveProject().getCircuitComponentList();
    componentList.clear();

    var component1 = new CircuitComponent();
	//var component2 = new CircuitComponent();

	component1.name = "Source";
	//component2.name = "Source";

    component1.setAsPort( true );
    //component2.setAsPort( true );
    // Define the endpoints of this feed - these are defined in world position, but you can also attach them to edges, faces, etc.
/*	if(h_or_v == 0) // 0 for h, 1 for v
	{
		var coordinate1 = new CoordinateSystemPosition( -x - L + y, 0, Height);
		var coordinate2 = new CoordinateSystemPosition( x + L - y, 0, Height);
	}
	else
	{
		var coordinate1 = new CoordinateSystemPosition( 0, -x - L + y, Height);
    	var coordinate2 = new CoordinateSystemPosition( 0, x + L - y, Height);
		
	}
*/
	if(h_or_v == 0) // 0 for h, 1 for v
	{
		var coordinate1 = new CoordinateSystemPosition( -x, 0, Height);
		var coordinate2 = new CoordinateSystemPosition( x, 0, Height);
	}
	else
	{
		var coordinate1 = new CoordinateSystemPosition( 0, -x, Height);
    	var coordinate2 = new CoordinateSystemPosition( 0, x, Height);
		
	}
	//var coordinate3 = new CoordinateSystemPosition( 0, -x2, height);
    //var coordinate4 = new CoordinateSystemPosition( 0, x2, height);
    component1.setCircuitComponentDefinition( feed1 );
    component1.setCircuitComponentDefinition( feed1 );
    component1.setEndpoint1( coordinate1 );
    component1.setEndpoint2( coordinate2 );
/*
    component2.setCircuitComponentDefinition( feed2 );
    component2.setCircuitComponentDefinition( feed2 );
    component2.setEndpoint1( coordinate3 );
    component2.setEndpoint2( coordinate4 );
*/
    componentList.addCircuitComponent( component1 );
    //componentList.addCircuitComponent( component2 );

}
// Make the grid
function CreateGrid(x, y, d)
{
    // Set up the grid spacing for the antenna
    var grid = App.getActiveProject().getGrid();
    var cellSizes = grid.getCellSizesSpecification();

    cellSizes.setTargetSizes( Cartesian3D( 3, 3, 3 ));
    // And we need to set the Minimum Sizes - these are the minimum deltas that we will allow in this project.
    // We'll use the scalar ratio of 20% here.
    cellSizes.setMinimumSizes( Cartesian3D( "3", "3", "3" ) );
    cellSizes.setMinimumIsRatioX( true );
    cellSizes.setMinimumIsRatioY( true );
    cellSizes.setMinimumIsRatioZ( true );

    grid.specifyPaddingExtent( Cartesian3D( "20", "20", "20" ), Cartesian3D( "20", "20", "20" ), true, true );


	a = Math.sqrt(2*(x-y));
	var boundingBox = new BoundingBox3D( new Cartesian3D( "-"+x+"", "-"+x+"", "-"+d+"" ), new Cartesian3D( ""+x+" ", ""+x+" ", "0.05 " ) );
	var cellSizeSpec = new CellSizesSpecification;
	cellSizeSpec.setTargetSizes( new Cartesian3D( "0.9 mm", "0.9 mm", "0.9 mm" ) );
	cellSizeSpec.setMinimumSizes( new Cartesian3D( "0.3 mm", "0.3 mm", "0.3 mm" ) );
//	cellSizeSpec.setTargetSizes( new Cartesian3D(  "3*"+a+" m", "3*"+a+" m", "3*"+a+" m" ) );
//	cellSizeSpec.setMinimumSizes( new Cartesian3D( ""+a+" m", ""+a+" m", ""+a+" m" ) );
//	grid.addManualGridRegion( Grid.X | Grid.Y | Grid.Z, boundingBox, cellSizeSpec );


}


// Make the sensors to detect the emitted signal
function CreateSensors()
{
    // Here we will create a sensor definition and attach it to a near-field sensor on the surface of one of our objects.

    var sensorDataDefinitionList = App.getActiveProject().getSensorDataDefinitionList();
        sensorDataDefinitionList.clear();

    // Create a sensor
        var farSensor = new FarZoneSensor();
    farSensor.retrieveSteadyStateData = true;
       farSensor.setAngle1IncrementRadians(Math.PI/36.0);
    farSensor.setAngle2IncrementRadians(Math.PI/36.0);
       farSensor.name = "Far Zone Sensor";


    var FarZoneSensorList = App.getActiveProject().getFarZoneSensorList();
       FarZoneSensorList.clear();
    FarZoneSensorList.addFarZoneSensor( farSensor );
}
function CreateAntennaSimulationData()
{
    // This function modifies the NewSimulationData parameters of the project.
       // They're called "New" because they get applied every time we create an instance of this
    // project and place it on our simulation queue.
	var simData = App.getActiveProject().getNewSimulationData();
	var FOI = simData.getFOIParameters();
	FOI.clearAllSpecifiedFrequencies();
	FOI.foiSource = 1;
	for(var k = 0;k < freqCoefficients;k++) {
		FOI.addSpecifiedFrequency(freq[k] + " MHz");
	}

    // These should already be set, however just to make sure the current project is set up correctly
       simData.excitationType = NewSimulationData.DiscreteSources;
    simData.enableSParameters = true;
}
function QueueSimulation()
{
   // Create and start the simulation. Project must be saved in order to run.
       var simulation = App.getActiveProject().createSimulation( false );

    Output.println( "Successfully created the simulation." );

    var projectId = simulation.getProjectId();
       var simulationId = simulation.getSimulationId();
    var numRuns = simulation.getRunCount();
}
function MakeImage(i)
{
  // This function orients the generated detector and saves it as a .png
  // Creates a new Camera and initializes its position
  if (i==0)
  {
    newCam = Camera();
    newCam.setPosition(Cartesian3D('0','0','10'))
    // Adjusts project camera to the above coordinates
    View.setCamera(newCam);
  }
  // Zooms out to include the entire detector, then saves as a .png
  View.zoomToExtents();
  View.saveImageToFile(workingdir+"/Run_Outputs/"+RunName+"/Antenna_Images/"+gen+"/"+i+"_"+"detector.png", -1, -1);
}
